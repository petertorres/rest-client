version: 2.1

default: &parameters-environment
  parameters:
    environment:
      type: enum
      enum: ["dev", "staging", "prod"]

#default: &environments
#  environment:
#    type: enum
#    enum: ["dev", "staging", "prod"]
#
#default: &enum-envs
#  type: enum
#  enum: ["dev", "staging", "prod"]

executors:
  openjdk:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

commands:
  eval-echo-env:
    #parameters:
    #  environment:
    #    type: enum
    #    enum: ["dev", "staging", "prod"]
    <<: *parameters-environment
    #<<: *environments
    #<<: *enum-envs
    steps:
      - run:
          name: Eval, echo & concat params to a string
          command: |
            #eval echo \$`echo << parameters.environment >> | tr 'a-z' 'A-Z'`_GCP_KEY >> $BASH_ENV
            eval echo \$`echo << parameters.environment >> | tr 'a-z' 'A-Z'`_GCP_KEY > /tmp/gcp-key.json
            #gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json' >> $BASH_ENV
            source $BASH_ENV 
            set | grep -i "gcp_key"
            set | grep -i "google"
            echo $GOOGLE_APPLICATION_CREDENTIALS
            cat $GOOGLE_APPLICATION_CREDENTIALS

jobs:
  build:
    executor: openjdk
    #parameters:
    # environment:
    #   type: enum
    #   enum: ["dev", "staging", "prod"]
    <<: *parameters-environment
    #<<: *environment
    #<<: *enum-envs
   
    steps:
      - checkout
      - eval-echo-env:
          environment: << parameters.environment >>

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      #- run:
      #    name: Set up shell variable
      #    command: |
      #      eval TEMP_KEY=`which javac`
      #      echo "JAVAC ENV from eval: $TEMP_KEY"
      #      echo "export JAV_PATH=$(which javac | tr 'a-z' 'A-Z')_AND_STUFF" >> $BASH_ENV
      #      echo "JAV_PATH before sourcing BASH_ENV: $JAV_PATH"
      #      source $BASH_ENV
      #      echo "JAV_PATH ENV from export: $JAV_PATH"
      #- run:
      #    name: Read shell variable
      #    command: |
      #      echo "JAVAC ENV from variable $TEMP_KEY"
      #      echo "JAV_PATH ENV from variable $JAV_PATH"
      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradlew
          key: v1-dependencies-{{ checksum "build.gradle" }}

  test:
    #parameters:
    #  environment:
    #    type: enum
    #    enum: ["dev", "staging", "prod"]
    <<: *parameters-environment
    #<<: *environment
    #<<: *enum-envs
    
    executor: openjdk
    steps:
      - checkout
      # run tests!
      - run: ./gradlew cleanTest test
      - run: echo "Released to << parameters.environment >>"
      
  release:
    executor: openjdk
    steps:
      - run: echo "MESSAGE $success"

workflows:
  build-test-and-approval-deploy:
    jobs:
      - build:
          name: dev-build
          environment: dev
      - test:
          name: dev-test
          environment: dev
          requires:
              - dev-build
      - release:
          name: release-to-dev
          requires:
              - dev-test
      - pre-prod-hold:
          name: request-approval
          type: approval
          requires:
            - release-to-dev
      - test:
          name: prod-acceptance-test
          environment: prod
          requires:
              - request-approval
      - release:
          name: release-to-prod
          requires:
              - prod-acceptance-test

# https://circleci.com/docs/2.0/language-java/ for more details
# Note: The parameters declaration is available in configuration version 2.1 and later.
# https://circleci.com/docs/2.0/reusing-config/#using-the-parameters-declaration
# https://circleci.com/blog/manual-job-approval-and-scheduled-workflow-runs/

